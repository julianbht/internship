on:
  workflow_call:
    inputs:
      appName:
        description: 'Application Name'
        required: true
        type: string

permissions:
  id-token: write
  contents: read

env:
  PROJECT_ID: 'donista-backend'
  GCLOUD_PROJECT: 'donista-backend'
  GAR_LOCATION: 'europe-west1'
  GKE_CLUSTER: 'donista-production-cluster'
  GKE_ZONE: 'europe-west1-b'
  DEPLOYMENT_NAME: '${{ inputs.appName }}'
  REPOSITORY: 'docker-registry'
  IMAGE: '${{ inputs.appName }}'
  WORKLOAD_IDENTITY_PROVIDER: 'projects/###/locations/global/workloadIdentityPools/github/providers/my-repo'



jobs:
  build:
    name: 'Build and create container'
    runs-on: 'ubuntu-latest'

    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
      - name: 'Checkout'
        uses: 'actions/checkout@v4'

      - name: 'Setup Java'
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4
        with:
          cache-read-only: false

      # Configure Workload Identity Federation and generate an access token.
      #
      # See https://github.com/google-github-actions/auth for more options,
      # including authenticating via a JSON credentials file.
      - id: 'auth'
        name: 'Authenticate to Google Cloud'
        uses: 'google-github-actions/###'
        with:
          workload_identity_provider: '${{ env.WORKLOAD_IDENTITY_PROVIDER }}'

      # Authenticate Docker to Google Cloud Artifact Registry
      - name: 'Docker Auth'
        uses: 'docker/login-action@v3'
        with:
          username: 'oauth2accesstoken'
          password: '${{ steps.auth.outputs.auth_token }}'
          registry: '${{ env.GAR_LOCATION }}-docker.pkg.dev'

      # Get the GKE credentials so we can deploy to the cluster
      - name: 'Set up GKE credentials'
        uses: 'google-github-actions/get-gke-credentials@v2'
        with:
          cluster_name: '${{ env.GKE_CLUSTER }}'
          location: '${{ env.GKE_ZONE }}'

      - name: Build with Gradle
        run: ./gradlew clean test :${{ env.DEPLOYMENT_NAME }}:build :${{ env.DEPLOYMENT_NAME }}:jib -Djib.to.image=${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE }}:${GITHUB_SHA} -Djib.console=plain

      - name: 'Upload JUnit Test Results'
        uses: actions/upload-artifact@v4
        with:
          name: junit-test-results
          path: '**/build/test-results/test/*.xml'

      - name: Summarize tests results
        uses: jeantessier/test-summary-action@v1
        if: ${{ always() }}